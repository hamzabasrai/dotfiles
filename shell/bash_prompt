#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# [!] Don't break this function into smaller, more specialized ones
# as you will only pollute the global space even more. This function
# cannot be unset because it's called every time the prompt string
# is shown.

git_prompt() {

    local branchName=""
    local tmp=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if the current directory is in a Git repository.

    ! git rev-parse &>/dev/null \
        && return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if in `.git/` directory (some of the following
    # checks don't make sense/won't work in the `.git` directory).

    [ "$(git rev-parse --is-inside-git-dir)" == "true" ] \
        && return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for uncommitted changes in the index.

    if ! git diff --quiet --ignore-submodules --cached; then
        tmp="$tmp+";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for unstaged changes.

    if ! git diff-files --quiet --ignore-submodules --; then
        tmp="$tmp!";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for untracked files.

    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        tmp="$tmp?";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for stashed files.

    if git rev-parse --verify refs/stash &>/dev/null; then
        tmp="$tmp$";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    [ -n "$tmp" ] \
        && tmp=" [$tmp]"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    branchName="$( printf "%s" "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unknown)" )" | tr -d "\n" )"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    printf "%s" "$1$branchName$tmp"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

enable_color_support() {
    if [[ $COLORTERM == gnome-* && $TERM == xterm ]] \
        && infocmp gnome-256color &> /dev/null; then
        export TERM="gnome-256color"
    elif infocmp xterm-256color &> /dev/null; then
        export TERM="xterm-256color"
    fi

    # Load color support.
    source ~/dotfiles/shell/bash_colors

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set_PS1_prompt() {
    
    local reset=$(tput sgr0 2> /dev/null)

    local green=$(tput setaf 2)
    local yellow=$(tput setaf 3)
    local cyan=$(tput setaf 6)
    local white=$(tput setaf 7)
    
    if [[ "${SSH_TTY}" ]]; then                    # Add SSH indicator
        PS1="${yellow}SSH $reset"
    else
        PS1="$reset"
    fi
    
    PS1+="\[$reset\]\A "                            # System Time
    PS1+="\[$cyan\]\u "                             # Username
    PS1+="\[$white\]\w"                             # Working directory
    PS1+="\[\$(git_prompt \"$white on $green\")\]"  # Git Repository Details
    PS1+="\n"                                       # Newline
    PS1+="\[$white\]$ \[$reset\]"                   # '$' Prompt
    
    export PS1;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
    enable_color_support
    set_PS1_prompt
}

main

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
unset -f enable_color_support
unset -f main
unset -f set_PS1_prompt







